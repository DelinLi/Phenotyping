j=i
}else{
x = data[,i]
y = data[,j]
temp=as.data.frame(cbind(x,y))
temp=cbind(temp,names(data)[i],names(data)[j])
z=rbind(z,temp)
j=j+1
}
}
names(z)=c('x','y','x_lab','y_lab')
z$x_lab = ezLev(factor(z$x_lab),names(data))
z$y_lab = ezLev(factor(z$y_lab),names(data))
z=z[z$x_lab!=z$y_lab,]
#obtain correlation values
z_cor = data.frame()
i = 1
j = i
while(i<=length(data)){
if(j>length(data)){
i=i+1
j=i
}else{
x = data[,i]
y = data[,j]
x_mid = min(x)+diff(range(x))/2
y_mid = min(y)+diff(range(y))/2
this_cor = cor(x,y)
this_cor.test = cor.test(x,y)
this_col = ifelse(this_cor.test$p.value<.05,'<.05','>.05')
this_size = (this_cor)^2
cor_text = ifelse(
this_cor>0
,substr(format(c(this_cor,.123456789),digits=2)[1],2,4)
,paste('-',substr(format(c(this_cor,.123456789),digits=2)[1],3,5),sep='')
)
b=as.data.frame(cor_text)
b=cbind(b,x_mid,y_mid,this_col,this_size,names(data)[j],names(data)[i])
z_cor=rbind(z_cor,b)
j=j+1
}
}
names(z_cor)=c('cor','x_mid','y_mid','p','rsq','x_lab','y_lab')
z_cor$x_lab = ezLev(factor(z_cor$x_lab),names(data))
z_cor$y_lab = ezLev(factor(z_cor$y_lab),names(data))
diag = z_cor[z_cor$x_lab==z_cor$y_lab,]
z_cor=z_cor[z_cor$x_lab!=z_cor$y_lab,]
#start creating layers
points_layer = layer(
geom = 'point'
, data = z
, mapping = aes(
x = x
, y = y
)
)
lm_line_layer = layer(
geom = 'line'
, geom_params = list(colour = 'red')
, stat = 'smooth'
, stat_params = list(method = 'lm')
, data = z
, mapping = aes(
x = x
, y = y
)
)
lm_ribbon_layer = layer(
geom = 'ribbon'
, geom_params = list(fill = 'green', alpha = .5)
, stat = 'smooth'
, stat_params = list(method = 'lm')
, data = z
, mapping = aes(
x = x
, y = y
)
)
cor_text = layer(
geom = 'text'
, data = z_cor
, mapping = aes(
x=y_mid
, y=x_mid
, label=cor
, size = rsq
, colour = p
)
)
var_text = layer(
geom = 'text'
, geom_params = list(size=var_text_size)
, data = diag
, mapping = aes(
x=y_mid
, y=x_mid
, label=x_lab
)
)
f = facet_grid(y_lab~x_lab,scales='free')
o = opts(
panel.grid.minor = theme_blank()
,panel.grid.major = theme_blank()
,axis.ticks = theme_blank()
,axis.text.y = theme_blank()
,axis.text.x = theme_blank()
,axis.title.y = theme_blank()
,axis.title.x = theme_blank()
,legend.position='none'
)
size_scale = scale_size(limits = c(0,1),to=cor_text_limits)
return(
ggplot()+
points_layer+
lm_ribbon_layer+
lm_line_layer+
var_text+
cor_text+
f+
o+
size_scale
)
}
#set up some fake data
library(MASS)
N=100
#first pair of variables
variance1=1
variance2=2
mean1=10
mean2=20
rho = .8
Sigma=matrix(c(variance1,sqrt(variance1*variance2)*rho,sqrt(variance1*variance2)*rho,variance2),2,2)
pair1=mvrnorm(N,c(mean1,mean2),Sigma,empirical=T)
#second pair of variables
variance1=10
variance2=20
mean1=100
mean2=200
rho = -.4
Sigma=matrix(c(variance1,sqrt(variance1*variance2)*rho,sqrt(variance1*variance2)*rho,variance2),2,2)
pair2=mvrnorm(N,c(mean1,mean2),Sigma,empirical=T)
my_data=data.frame(cbind(pair1,pair2))
ggcorplot(
data = my_data
, var_text_size = 30
, cor_text_limits = c(2,30)
)
(80+75.5)/2
-log10(1/22709)
-log10(0.1/22709)
-log10(2.9e-6)
138496548 - 95926304
138496548 - 117919679
12*30
180*5
180*4
248794392-248798772
245090274-245091642
57540-77760
67540-77760
17495.68/7
17000/4
17000/4*6
17500/4*6
5963
26250+28030
360 * 0.9
15000+30000+71000+84500+21970+21000+15000+14000+17000
nchar("------AGAGGGACGGGGGAGGTGTGCATA-T--TT--TAGTGCTT-AATCATTAA--AAATGTATATATAATTACTTTCAAATCCAAT---------TTCTAAAAATTTTTAAAAT------------------TACTTTTCCAACAAATAAAATTTATTGTAACCCATCTCATTCTTAAATATTAACTTCACCTTGATTTGATTTATTTTCTTATAAAAAAAAAT--AAATATT---AAATTCTTT-TAAAATATTTAATAACAA-------------CGATATAAAAATTTCTATTT---------TAAGTTAATTCAATCGTGGAATATCAATTACTG-----GACAGGTTCC--TCTGAAAAGATTAAAATACCGC--CAAATCATTTAGCTTTAAAG-------AACTTAACTATTAATCACTTAGTTTTAAAATTTACATT-------------------TTTAATAAT----------AGGGTATCTAATCCTAGTT-")
1.15**6
1.15**4
1.15**5
1.1**5
1.1**7
40000 /523
897/15
library("plot3D")
install.packages("plot3D")
library("plot3D")
data(VADeaths)
head(VADeaths)
#  hist3D and ribbon3D with greyish background, rotated, rescaled,...
hist3D(z = VADeaths, scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = "#0072B2", border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
hist3D (x = 1:5, y = 1:4, z = VADeaths,
bty = "g", phi = 20,  theta = -60,
xlab = "", ylab = "", zlab = "", main = "VADeaths",
col = "#0072B2", border = "black", shade = 0.8,
ticktype = "detailed", space = 0.15, d = 2, cex.axis = 1e-9)
# Use text3D to label x axis
text3D(x = 1:5, y = rep(0.5, 5), z = rep(3, 5),
labels = rownames(VADeaths),
add = TRUE, adj = 0)
# Use text3D to label y axis
text3D(x = rep(1, 4),   y = 1:4, z = rep(0, 4),
labels  = colnames(VADeaths),
add = TRUE, adj = 1)
seq(2,100,2)
Data <-read.csv("Desktop/Favor/Soy/Landrace.firstwo.csv")
head(Data)
Data <-read.csv("Desktop/Favor/Soy/Landrace.firstwo.csv")
OUT<-NULL
for(i in seq(2,100,2)){
row.tem<-NULL
for(j in seq(2,100,2)){
row.tem<-c(row.tem,sum(Data$One >=(i-2)/100 & Data$One <(i)/100 &
Data$Two >=(j-2)/100 & Data$Two <(j)/100 )
}
OUT<-rbind(OUT,row.tem)
}
Data <-read.csv("Desktop/Favor/Soy/Landrace.firstwo.csv")
OUT<-NULL
for(i in seq(2,100,2)){
row.tem<-NULL
for(j in seq(2,100,2)){
row.tem<-c(row.tem,sum(Data$One >=(i-2)/100 & Data$One <(i)/100 &
Data$Two >=(j-2)/100 & Data$Two <(j)/100 ))
}
OUT<-rbind(OUT,row.tem)
}
hist3D(z = Data, scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = "#0072B2", border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
hist3D(z = as.matrix(Data), scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = "#0072B2", border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
hist3D(z = as.matrix(Data))
hist3D(z = as.matrix(Data)
)
head(Data)
hist3D(z = as.matrix(OUT), scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = "#0072B2", border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
Data <-read.csv("Desktop/Favor/Soy/Landrace.firstwo.csv")
OUT<-NULL
for(i in seq(5,100,5)){
row.tem<-NULL
for(j in seq(2,100,2)){
row.tem<-c(row.tem,sum(Data$One >=(i-2)/100 & Data$One <(i)/100 &
Data$Two >=(j-2)/100 & Data$Two <(j)/100 ))
}
OUT<-rbind(OUT,row.tem)
}
Data <-read.csv("Desktop/Favor/Soy/Landrace.firstwo.csv")
OUT<-NULL
for(i in seq(5,100,5)){
row.tem<-NULL
for(j in seq(5,100,5)){
row.tem<-c(row.tem,sum(Data$One >=(i-2)/100 & Data$One <(i)/100 &
Data$Two >=(j-2)/100 & Data$Two <(j)/100 ))
}
OUT<-rbind(OUT,row.tem)
}
hist3D(z = as.matrix(OUT), scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = "#0072B2", border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
Data <-read.csv("Desktop/Favor/Soy/Landrace.firstwo.csv")
OUT<-NULL
for(i in seq(10,100,10)){
row.tem<-NULL
for(j in seq(10,100,10)){
row.tem<-c(row.tem,sum(Data$One >=(i-2)/100 & Data$One <(i)/100 &
Data$Two >=(j-2)/100 & Data$Two <(j)/100 ))
}
OUT<-rbind(OUT,row.tem)
}
hist3D(z = as.matrix(OUT), scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = "#0072B2", border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
Data <-read.csv("Desktop/Favor/Soy/Landrace.firstwo.csv")
OUT<-NULL
step<-5
for(i in seq(step,100,step)){
row.tem<-NULL
for(j in seq(step,100,step)){
row.tem<-c(row.tem,sum(Data$One >=(i-step)/100 & Data$One <(i)/100 &
Data$Two >=(j-step)/100 & Data$Two <(j)/100 ))
}
OUT<-rbind(OUT,row.tem)
}
hist3D(z = as.matrix(OUT), scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = "#0072B2", border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
OUT<-NULL
step<-2
for(i in seq(step,100,step)){
row.tem<-NULL
for(j in seq(step,100,step)){
row.tem<-c(row.tem,sum(Data$One >=(i-step)/100 & Data$One <(i)/100 &
Data$Two >=(j-step)/100 & Data$Two <(j)/100 ))
}
OUT<-rbind(OUT,row.tem)
}
hist3D(z = as.matrix(OUT), scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = "#0072B2", border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
head(OUT)
Col<-as.matrix(OUT)
str(Col)
Col[1:50,1:50] <- "blue"
col[6:10,40:50] <- "red"
Col[1:50,1:50] <- "blue"
Col[6:10,40:50] <- "red"
hist3D(z = as.matrix(OUT), scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = Col, border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
Col
Col[6:10,40:50]
Col[1:50,1:50] <- "blue"
Col[40:50,6:10] <- "red"
hist3D(z = as.matrix(OUT), scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = Col, border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
head(OUT)
head(Data)
max(OUT[,1])
max(OUT[,2])
max(Data[,2])
max(Data[,1])
Col[1:50,1:50] <- "blue"
Col[6:10,40:50] <- "red"
hist3D(z = as.matrix(OUT), scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = Col, border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
str(Col)
Col[6:10,40:50]
head(Col)
head(Col,10L)
hist3D_fancy<- function(x, y, break.func = c("Sturges", "scott", "FD"), breaks = NULL,
colvar = NULL, col="white", clab=NULL, phi = 5, theta = 25, ...){
# Compute the number of classes for a histogram
break.func <- break.func [1]
if(is.null(breaks)){
x.breaks <- switch(break.func,
Sturges = nclass.Sturges(x),
scott = nclass.scott(x),
FD = nclass.FD(x))
y.breaks <- switch(break.func,
Sturges = nclass.Sturges(y),
scott = nclass.scott(y),
FD = nclass.FD(y))
} else x.breaks <- y.breaks <- breaks
# Cut x and y variables in bins for counting
x.bin <- seq(min(x), max(x), length.out = x.breaks)
y.bin <- seq(min(y), max(y), length.out = y.breaks)
xy <- table(cut(x, x.bin), cut(y, y.bin))
z <- xy
xmid <- 0.5*(x.bin[-1] + x.bin[-length(x.bin)])
ymid <- 0.5*(y.bin[-1] + y.bin[-length(y.bin)])
oldmar <- par("mar")
par (mar = par("mar") + c(0, 0, 0, 2))
hist3D(x = xmid, y = ymid, z = xy, ...,
zlim = c(-max(z)/2, max(z)), zlab = "counts", bty= "g",
phi = phi, theta = theta,
shade = 0.2, col = col, border = "black",
d = 1, ticktype = "detailed")
scatter3D(x, y,
z = rep(-max(z)/2, length.out = length(x)),
colvar = colvar, col = gg.col(100),
add = TRUE, pch = 18, clab = clab,
colkey = list(length = 0.5, width = 0.5,
dist = 0.05, cex.axis = 0.8, cex.clab = 0.8)
)
par(mar = oldmar)
}
head(quakes)
hist3D_fancy(Data$One, Data$Two, #colvar=quakes$depth,
breaks =30)
hist3D(z = as.matrix(OUT), scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = Col, border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
help(hist3D)
hist3D(z = as.matrix(OUT), scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = Col, border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
head(OUT)
colnames(OUT)<-1:50
rownames(OUT)<-1:50
hist3D(z = as.matrix(OUT), scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = Col, border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
head(Data)
head(head(VADeaths))
hist3D(z = as.matrix(VADeaths), scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = Col, border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
hist3D (x = 1:5, y = 1:4, z = VADeaths,
bty = "g", phi = 20,  theta = -60,
xlab = "", ylab = "", zlab = "", main = "VADeaths",
col = "#0072B2", border = "black", shade = 0.8,
ticktype = "detailed", space = 0.15, d = 2, cex.axis = 1e-9)
# Use text3D to label x axis
text3D(x = 1:5, y = rep(0.5, 5), z = rep(3, 5),
labels = rownames(VADeaths),
add = TRUE, adj = 0)
x
head(VADeaths[,1:5])
head(VADeaths[1:5,1])
head(VADeaths[,1:4])
head(VADeaths[1:5,1:4])
OUT
hist3D(z = as.matrix(OUT), scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = Col, border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
hist3D(z = as.matrix(OUT), scale = FALSE, expand = 0.01, bty = "g", phi = 20,
col = Col, border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
Data <-read.csv("Desktop/Favor/Soy/Landrace.firstwo.csv")
OUT<-NULL
OUT.Two<-NULL
step<-2
for(i in seq(step,100,step)){
row.tem<-NULL
for(j in seq(step,100,step)){
row.tem<-c(row.tem,sum(Data$One >=(i-step)/100 & Data$One <(i)/100 &
Data$Two >=(j-step)/100 & Data$Two <(j)/100 ))
}
OUT<-rbind(OUT,row.tem)
}
Col<-as.matrix(OUT)
Col[1:50,1:50] <- "blue"
Col[6:10,40:50] <- "red"
hist3D(z = as.matrix(OUT), scale = FALSE, expand = 0.01, bty = "g", phi = 20,
border = "black", shade = 0.2, ltheta = 90,
space = 0.3, ticktype = "detailed", d = 2)
Data <-read.csv("Desktop/Favor/Soy/Landrace.firstwo.csv")
OUT<-NULL
OUT.Two<-NULL
step<-2
for(i in seq(step,100,step)){
row.tem<-NULL
for(j in seq(step,100,step)){
row.tem<-c(row.tem,sum(Data$One >=(i-step)/100 & Data$One <(i)/100 &
Data$Two >=(j-step)/100 & Data$Two <(j)/100 ))
}
OUT<-rbind(OUT,row.tem)
}
colnames(OUT)<-1:50
rownames(OUT)<-1:50
max(Data$One)
max(Data$Two)
colnames(OUT)<-rep(seq(step,100,step))
rownames(OUT)<-rep(seq(step,100,step))
colnames(OUT)<-rep(seq(step,100,step))/100
rownames(OUT)<-rep(seq(step,100,step))/100
write.csv(OUT,"Desktop/Favor/Soy/OUT.bin.csv",row.names = F)
write.csv(OUT,"Desktop/Favor/Soy/OUT.bin.csv",row.names = T)
OUT<-NULL
OUT.Two<-NULL
step<-1
for(i in seq(step,100,step)){
row.tem<-NULL
for(j in seq(step,100,step)){
row.tem<-c(row.tem,sum(Data$One >=(i-step)/100 & Data$One <(i)/100 &
Data$Two >=(j-step)/100 & Data$Two <(j)/100 ))
}
OUT<-rbind(OUT,row.tem)
}
colnames(OUT)<-rep(seq(step,100,step))/100
rownames(OUT)<-rep(seq(step,100,step))/100
write.csv(OUT,"Desktop/Favor/Soy/OUT.bin.01.csv",row.names = T)
75289*70000
337+138+348+365+350+342
1880 / (96+327*5)
54280-4197
0.98**12
0.98**24
300000 * 0.03
390*0.2
44/360
12605/17000
9087*17.4、60
9087*17.4/60
200、60
200/60
200/600
12*33
243+190+60+60+123
59914.69    + 209.71
59914.69 - 209.71  -24.4
59914.69 + 209.71  -24.4
603700 / 709.6892
63700 / 7.096892
50 * 200
2000、50 * 200
2000/50 * 200
2000/50
3900/􏰙7.096892
3900/7.096892
8975 -550
59914.69 - 3900
56014.69 + 213.36
8425 * 7.096892
63694.61
63694.61 -3900
59794.61 + 213.36 -60100
483.52 + 3,715.34
483.52 + 3715.34
setwd("/Users/delin/Documents/github/Phenotyping/Data/")
setwd("~/Documents/github/Phenotyping/Data/")
library(PerformanceAnalytics)
Data <-read.delim("example/Miflora.Recording.2019.Home.txt",header = T)
head(Data)
cbind(Data$Temp[Data$Flora %in% "In"], Data$Temp[Data$Flora %in% "Out"])
Tem <- cbind(Data$Temp[Data$Flora %in% "In"], Data$Temp[Data$Flora %in% "Out"])
cor(Tem)
summary(abs(Tem[,1]-Tem[,2]))
cor(Tem[-c(1:20),])
summary(abs(Tem[-c(1:20),1]-Tem[-c(1:20),2]))
tail(Tem)
